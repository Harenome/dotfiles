#!/bin/bash
# Little dotfiles manager

## Variables
# Replacing $HOME with another location for the testing stage
TESTHOME=$HOME/tmp

DATE="Feburary 2nd 2013"
VERSION="0.1"

# Dirty (and hopefully, temporary) way to get the full path
DIRNAME="$(pwd)$([[ $(dirname $0) = "." ]] || echo "/$(dirname $0)")"

CONFIGFILE="dotm.rc"
DOBACKUPS=true
FORCEOVERWRITE=false
OVERWRITELINK=false
OVERWRITEFILE=false
OVERWRITEDIR=false
VERBOSE=false

## Functions
function version
{
    echo "dotm, version $VERSION ($DATE)"
}

function printhelp
{
    echo "Usage: ./dotm [OPTIONS]" #You don't say?
}

function backup
{
    cp -r "$1" backups/
}

# Not tested yet
function restore
{
    cp -rf "backups/$1" $TESTHOME/
}

function createlink
{
    # TODO: manage overwriting of regular files and directories

    # ln has a backup feature, however it is limited
    # (the backup is done in the same directory)
    local TARGET="$DIRNAME/$2"
    local DESTINATION="$TESTHOME/$1"

    if [[ -e "$DESTINATION" ]]; then
        if [[ -h "$DESTINATION" ]]; then
            if $VERBOSE; then echo "$DESTINATION is a link to $(readlink $DESTINATION)."; fi
            if $OVERWRITELINK || $FORCEOVERWRITE; then
                if $VERBOSE; then echo "Overwriting the link (New target: $TARGET)."; fi
                ln -sf "$TARGET" "$DESTINATION"
            elif $VERBOSE; then
                echo "Ignoring."
            fi
        elif [[ -f "$DESTINATION" ]]; then
            if $VERBOSE; then echo "There already exists a file at $DESTINATION."; fi
            if $DOBACKUPS; then
                if $VERBOSE; then echo "Backuping $DESTINATION."; fi
                backup "$DESTINATION"
            fi
            if $OVERWRITEFILE || $FORCEOVERWRITE; then
                if $VERBOSE; then echo "Creating the symbolic link. $DESTINATION will lead to $TARGET."; fi
                ln -sf "$TARGET" "$DESTINATION"
            elif $VERBOSE; then echo "Ignoring."; fi
        elif [[ -d "$DESTINATION" ]]; then
            if $VERBOSE; then echo "$DESTINATION is a directory."; fi
            if $DOBACKUPS; then
                if $VERBOSE; then echo "Backuping $DESTINATION."; fi
                backup "$DESTINATION"
            fi
            if $OVERWRITEDIR || $FORCEOVERWRITE; then
                if $VERBOSE; then echo "Creating the symbolic link. $DESTINATION will lead to $TARGET."; fi
                rm -r "$DESTINATION"
                ln -sf "$TARGET" "$DESTINATION"
            fi
        fi
    else
        if $VERBOSE; then echo "Creating the symbolic link. $DESTINATION will lead to $TARGET."; fi
        ln -s "$TARGET" "$DESTINATION"
    fi

}

function checkconfig
{
    local HASERROR=false

    for FILE in $(grep -Env "#|:|^$" $CONFIGFILE | cut -d " " -f 2); do
        [[ ! -e "$FILE" ]] &&
        echo "Error: The file $FILE doesn't exist. Please check your $CONFIGFILE file." &&
        HASERROR=true
    done

    if $HASERROR; then exit 1; fi
}

function singleconfig
{
    # Previous way to do so was to get the line number and read the file starting here.
    # TODO: Use awk's match.
    BEGINNING=$(grep -n "^$(echo $1):$" $CONFIGFILE | cut -d ':' -f 1)
    awk '{ if (NR > '$BEGINNING') if (length($0) > 0) { print } else { exit } }' $CONFIGFILE | while read DEST TARG; do
        createlink "$DEST" "$TARG"
    done
}

function allconfig
{
    awk '{ if (! match($0,":|#|^$")) { print } }' $CONFIGFILE | while read DEST TARG; do
        createlink "$DEST" "$TARG"
    done
}

function interactive
{
    echo ""
}

## Main
checkconfig
mkdir -p backups

if [[ $# -eq 0 ]]; then
    allconfig
else
    # getopt and getopts are a bit painful
    for ARG in $*; do
        if [[ ${ARG:0:2} = "--" ]]; then
            case $ARG in
                "--verbose" ) VERBOSE=true;;
                "--backup" ) DOBACKUPS=true;;
                "--overwrite-link" ) OVERWRITELINK=true;;
                "--overwrite-file" ) OVERWRITEFILE=true;;
                "--overwrite-dir" ) OVERWRITEDIR=true;;
                "--force-overwrite" ) FORCEOVERWRITE=true;;
                "--version" ) version; exit 0;;
                "--help" ) printhelp; exit 0;;
                * ) echo "Wrong argument: $ARG"; WRONGARGUMENT=true;;
            esac
        fi
    done
    if $WRONGARGUMENT; then exit 3; fi
    allconfig
fi

exit 0
