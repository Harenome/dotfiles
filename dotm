#!/bin/bash
# Little dotfiles manager

#------------------------------------------------------------------------------
# Global variables
#------------------------------------------------------------------------------

## User variables
# Replace $HOME with another location for tests
BACKUPDIR=backups
CONFIGDIR=$HOME
CONFIGFILE="dotm.rc"

## Variables for version and help printing
DATE="Feburary 23rd 2013"
VERSION="0.3"

VERSIONSTRING="dotm, version $VERSION ($DATE)

This program is free software. It comes WITHOUT ANY WARRANTY, to
the extent permitted by applicable law. You can redistribute it
and/or modify it under the terms of the Do What The Fuck You Want
To Public License, Version 2, as published by Sam Hocevar. See
http://sam.zoy.org/wtfpl/COPYING for more details.

Written by Harenome Ranaivoarivony Razanajato"

HELPSTRING="Usage: $0 [OPTIONS]... [FILES]...

Options:
    --backup
        enable backups
    --force-overwrite
        force overwriting of links, files and dir
    --help
        print this help
    --overwrite-link
        overwrite links
    --overwrite-file
        overwrite files
    --overwrite-dir
        overwrite directories
    --verbose
        enable verbose mode
    --version
        print the version"

## Vital variables for the script
# Dirty (and hopefully, temporary) way to get the full path
DIRNAME="$(pwd)$([[ $(dirname $0) = "." ]] || echo "/$(dirname $0)")"

DOBACKUPS=true
FORCEOVERWRITE=false
OVERWRITELINK=false
OVERWRITEFILE=false
OVERWRITEDIR=false
VERBOSE=false
WRONGARGUMENT=false
UNKNOWNFILE=false
FILELIST=( )

#------------------------------------------------------------------------------
# Functions
#------------------------------------------------------------------------------

function version
{
    echo -e "$VERSIONSTRING"
}

function printhelp
{
    # TODO: complete the help

    echo -e "$HELPSTRING"
}

function backup
{
    cp -r "$1" $BACKUPDIR/
}

# Not tested yet
function restore
{
    cp -rf "backups/$1" $CONFIGDIR/
}

function createlink
{
    # TODO: manage overwriting of regular files and directories

    # ln has a backup feature, however it is limited
    # (the backup is done in the same directory)
    local TARGET="$DIRNAME/$2"
    local DESTINATION="$CONFIGDIR/$1"

    if [[ -e "$DESTINATION" ]]; then
        if [[ -h "$DESTINATION" ]]; then
            if $VERBOSE; then echo "$DESTINATION is a link to $(readlink $DESTINATION)." 1>&2; fi
            if $OVERWRITELINK || $FORCEOVERWRITE; then
                if $VERBOSE; then echo "Overwriting the link (New target: $TARGET)."; fi
                ln -sf "$TARGET" "$DESTINATION"
            elif $VERBOSE; then
                echo "Ignoring."
            fi
        elif [[ -f "$DESTINATION" ]]; then
            if $VERBOSE; then echo "There already exists a file at $DESTINATION." 1>&2; fi
            if $DOBACKUPS; then
                if $VERBOSE; then echo "Backuping $DESTINATION."; fi
                backup "$DESTINATION"
            fi
            if $OVERWRITEFILE || $FORCEOVERWRITE; then
                if $VERBOSE; then echo "Creating the symbolic link. $DESTINATION will lead to $TARGET."; fi
                ln -sf "$TARGET" "$DESTINATION"
            elif $VERBOSE; then echo "Ignoring."; fi
        elif [[ -d "$DESTINATION" ]]; then
            if $VERBOSE; then echo "$DESTINATION is a directory." 1>&2; fi
            if $DOBACKUPS; then
                if $VERBOSE; then echo "Backuping $DESTINATION."; fi
                backup "$DESTINATION"
            fi
            if $OVERWRITEDIR || $FORCEOVERWRITE; then
                if $VERBOSE; then echo "Creating the symbolic link. $DESTINATION will lead to $TARGET."; fi
                rm -r "$DESTINATION"
                ln -sf "$TARGET" "$DESTINATION"
            fi
        fi
    else
        if $VERBOSE; then echo "Creating the symbolic link. $DESTINATION will lead to $TARGET."; fi
        ln -s "$TARGET" "$DESTINATION"
    fi

}

function checkconfigfile
{
    local HASERROR=false

    for FILE in $(grep -Env "#|:|^$" $CONFIGFILE | cut -d " " -f 2); do
        [[ ! -e "$FILE" ]] &&
        echo "Error: The file $FILE doesn't exist. Please check your $CONFIGFILE file." 1>&2 &&
        HASERROR=true
    done

    if $HASERROR; then exit 78; fi
}

function isinconfigfile
{
    if ! grep "^$(echo $1):$" $CONFIGFILE > /dev/null; then
        echo "Error: Don't know how to handle the config files for $1. Please check your $CONFIGFILE file." 1>&2
        UNKNOWNFILE=true
    else
        FILELIST=( ${FILELIST[@]} $1 )
    fi
}

function singleconfig
{
    # Previous way to do so was to get the line number and read the file starting here.
    # TODO: Use awk's match.
    BEGINNING=$(grep -n "^$(echo $1):$" $CONFIGFILE | cut -d ':' -f 1)
    awk '{ if (NR > '$BEGINNING') if (length($0) > 0) { print } else { exit } }' $CONFIGFILE | while read DEST TARG; do
        createlink "$DEST" "$TARG"
    done
}

function allconfig
{
    awk '{ if (! match($0,":|#|^$")) { print } }' $CONFIGFILE | while read DEST TARG; do
        createlink "$DEST" "$TARG"
    done
}

#------------------------------------------------------------------------------
# Main
#------------------------------------------------------------------------------

checkconfigfile
mkdir -p $BACKUPDIR

if [[ $# -eq 0 ]]; then
    allconfig
else
    # getopt and getopts are a bit painful
    for ARG in $*; do
        if [[ ${ARG:0:2} = "--" ]]; then
            case $ARG in
                "--verbose" ) VERBOSE=true;;
                "--no-backup" ) DOBACKUPS=false;;
                "--overwrite-link" ) OVERWRITELINK=true;;
                "--overwrite-file" ) OVERWRITEFILE=true;;
                "--overwrite-dir" ) OVERWRITEDIR=true;;
                "--force-overwrite" ) FORCEOVERWRITE=true;;
                "--version" ) version; exit 0;;
                "--help" ) printhelp; exit 0;;
                * ) echo "Wrong option: $ARG" 1>&2; WRONGARGUMENT=true;;
            esac
        else
            isinconfigfile $ARG
        fi
    done

    if $WRONGARGUMENT; then exit 64; fi
    if $UNKNOWNFILE; then exit 78; fi

    if [[ ${#FILELIST} -eq 0 ]]; then
        allconfig
    else
        for FILE in ${FILELIST[@]}; do
            singleconfig $FILE
        done
    fi
fi

exit 0
