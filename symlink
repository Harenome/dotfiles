#!/bin/bash

# Program: symlink
# Author: Harenome RANAIVOARIVONY RAZANAJATO
# Version: 1.2
# Date: October 17th 2015
# License: WTFPL v2

# This program is free software. It comes WITHOUT ANY WARRANTY, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://wtfpl.net/COPYING for more details.

################################################################################
# Global variables
################################################################################

PWD=`pwd`
YES_STRINGS="y Y yes YES"

BACKUP_DIR=$PWD/backups
CONFIG_DIR=$HOME

## Colors
COLOR_NORMAL="\x1b[0m"
COLOR_BOLD="\x1b[1m"
COLOR_DIM="\x1b[2m"
COLOR_UNDERLINED="\x1b[4m"
COLOR_INVERTED="\x1b[7m"

COLOR_SECTION="$COLOR_BOLD$COLOR_INVERTED"
COLOR_ERROR="$COLOR_BOLD\x1b[38;5;255m\x1b[48;5;196m"
COLOR_WARNING="$COLOR_BOLD\x1b[38;5;255m\x1b[48;5;208m"
COLOR_ENABLED="$COLOR_BOLD\x1b[32m"
COLOR_DISABLED="$COLOR_BOLD\x1b[31m"

## Variables for version and help printing
PROGRAM_NAME="symlink"
DATE="October 17th 2015"
VERSION="1.2"
LICENCE="This program is free software. It comes WITHOUT ANY WARRANTY, to
the extent permitted by applicable law. You can redistribute it
and/or modify it under the terms of the Do What The Fuck You Want
To Public License, Version 2, as published by Sam Hocevar. See
http://www.wtfpl.net for more details."

AUTHORS="Harenome Ranaivoarivony Razanajato"

VERSION_STRING="symlinks, version $VERSION ($DATE)

$LICENCE

Written by $AUTHORS."

HELP_STRING="\e[1m\e[7m NAME \e[0m

    $PROGRAM_NAME — Link *.symlink dotfiles

\e[1m\e[7m SYNOPSIS \e[0m

    \e[1m$0\e[0m [OPTIONS]...

\e[1m\e[7m OPTIONS \e[0m

    \e[1m--no-backup\e[0m
        disable backups
    \e[1m-f\e[0m,\e[1m --force-overwrite\e[0m
        force overwriting
    \e[1m--verbose\e[0m
        enable verbose mode
    \e[1m-h\e[0m,\e[1m --help\e[0m
        print this help
    \e[1m-v\e[0m,\e[1m --version\e[0m
        print the version
"

DO_BACKUPS=true
FORCE_OVERWRITE=false
VERBOSE=false
WRONG_ARGUMENT=false

################################################################################
# Functions
################################################################################

message ()
{
    echo -en "$1" 1>&2
}


verbose ()
{
    if $VERBOSE; then
        message "$*"
    fi
}

verbose_command ()
{
    if $VERBOSE; then
        message "$COLOR_DIM❯ $COLOR_BOLD$1$COLOR_NORMAL"
        shift
        [[ $# -ne 0 ]] && message " $*\n" || message "\n"
    fi
}

error ()
{
    message "$COLOR_ERROR  ERROR  $COLOR_NORMAL $1"
}

warning ()
{
    message "$COLOR_WARNING WARNING $COLOR_NORMAL $1"
}

print_version ()
{
    echo -e "$VERSION_STRING" 1>&2
}

print_help ()
{
    echo -e "$HELP_STRING"
}

print_option ()
{
    if $1; then
        message "    $COLOR_ENABLED✔$COLOR_NORMAL $2\n"
    else
        message "    $COLOR_DISABLED✗$COLOR_NORMAL $2\n"
    fi
}

print_var ()
{
    message "    $COLOR_BOLD●$COLOR_NORMAL $1: $2\n"
}

wrong_option ()
{
    WRONG_OPTIONS=( ${WRONG_OPTIONS[@]} "$1" )
    WRONG_ARGUMENT=true
}

backup ()
{
    verbose_command "mkdir -p" "$BACKUP_DIR"
    mkdir -p "$BACKUP_DIR"
    verbose_command "cp -r" "$1" "$BACKUP_DIR/"
    cp -r "$1" "$BACKUP_DIR/"
}

remove ()
{
    if $DO_BACKUPS; then
        backup "$1"
    fi
    verbose_command "rm -rf" "$1"
    rm -rf "$1"
}

answer_is_yes ()
{
    for YES in $YES_STRINGS; do
        if [ "$1" = "$YES" ]; then
            return 0;
        fi
    done
    return 1;
}

create_link ()
{
    if $LINK; then
        verbose_command "ln -sf" "$1" "$2"
        ln -sf "$1" "$2"
    fi
}

ask ()
{
    message "$1 [y/$COLOR_BOLDN$COLOR_NORMAL]\n"
    message "$COLOR_BOLD>$COLOR_NORMAL "
    read ANSWER
    if answer_is_yes "$ANSWER"; then
        return 0
    else
        return 1
    fi
}

overwrite ()
{
    if $FORCE_OVERWRITE || ask "$COLOR_UNDERLINED$1$COLOR_NORMAL already exists. Overwrite?"; then
        remove "$1"
        LINK=true
    fi
}

find_symlinks ()
{
    find . -name "*.symlink" | sed 's/^\.\///;s/\.symlink$//' | sort
}

################################################################################
# Main
################################################################################

# Process command line arguments, if any.
if [ $# -ne 0 ]; then
    # getopt and getopts are a bit painful
    for ARG in $*; do
        if [[ ${ARG:0:1} = "-" ]] && [[ ${ARG:0:2} != "--" ]]; then
            case $ARG in
                "-f" ) FORCE_OVERWRITE=true;;
                "-v" ) print_version; exit 0;;
                "-h" ) print_help; exit 0;;
                * ) wrong_option "$ARG";;
            esac
        elif [[ ${ARG:0:2} = "--" ]]; then
            case $ARG in
                "--verbose" ) VERBOSE=true;;
                "--no-backup" ) DO_BACKUPS=false;;
                "--force-overwrite" ) FORCE_OVERWRITE=true;;
                "--version" ) print_version; exit 0;;
                "--help" ) print_help; exit 0;;
                * ) wrong_option "$ARG";;
            esac
        fi
    done
fi

# Print version, options, etc if the verbose is enabled.
if $VERBOSE; then
    print_version
    echo "" 1>&2
    echo "" 1>&2
    message "$COLOR_SECTION Options $COLOR_NORMAL\n\n"
    print_option $VERBOSE "verbose"
    print_option $DO_BACKUPS "backups"
    print_option $FORCE_OVERWRITE "force-overwrite"
    print_var "BACKUP_DIR" "$BACKUP_DIR"
    print_var "CONFIG_DIR" "$CONFIG_DIR"
    echo "" 1>&2
fi

# Find *.symlink files in the current directory.
SYMLINKS=$(find_symlinks)

# Various warnings and errors.
[[ -z ${SYMLINKS[@]} ]] && warning "no symlinks found\n"
[[ "$FORCE_OVERWRITE" = "true" ]] && [[ "$DO_BACKUPS" = "false" ]] &&
    warning "backups disabled and force-overwrite enabled\n"

for OPTION in ${WRONG_OPTIONS[@]}; do
    error "wrong option \"$OPTION\"\n"
done

$WRONG_ARGUMENT && exit 64

# Linking.
message "\n$COLOR_SECTION Dotfiles linking $COLOR_NORMAL\n\n"
for FILE in ${SYMLINKS[@]}; do
    DIRNAME=`dirname $FILE`
    SOURCE="$PWD/$FILE.symlink"
    DESTINATION="$HOME/$FILE"
    LINK=true

    [[ "$VERBOSE" = "true" ]] && message "$COLOR_BOLD$FILE$COLOR_NORMAL\n"
    if [ -L "$DESTINATION" ] && [ `readlink "$DESTINATION"` = "$SOURCE" ]; then
        verbose_command "ignoring" "$FILE"
        LINK=false
    elif [ -e "$DESTINATION" ]; then
        LINK=false
        overwrite "$DESTINATION"
    elif [ "$DIRNAME" != "." ]; then
        mkdir -p "$HOME/$DIRNAME"
    fi

    if $LINK; then
        create_link "$SOURCE" "$DESTINATION"
    fi
done

exit 0
